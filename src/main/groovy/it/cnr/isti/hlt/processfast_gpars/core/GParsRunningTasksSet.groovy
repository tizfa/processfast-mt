/*
 * *****************
 *  Copyright 2015 Tiziano Fagni (tiziano.fagni@isti.cnr.it)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * *******************
 */

package it.cnr.isti.hlt.processfast_gpars.core

import it.cnr.isti.hlt.processfast.connector.ConnectorCapability
import it.cnr.isti.hlt.processfast.connector.ConnectorManager
import it.cnr.isti.hlt.processfast.core.SystemContext
import it.cnr.isti.hlt.processfast.data.Dictionary
import it.cnr.isti.hlt.processfast.data.RamDictionary
import it.cnr.isti.hlt.processfast.utils.Procedure1
import it.cnr.isti.hlt.processfast_gpars.connector.GParsBarrier
import it.cnr.isti.hlt.processfast_gpars.connector.GParsConnector

/**
 * @author Tiziano Fagni (tiziano.fagni@isti.cnr.it)
 */
class GParsRunningTasksSet implements ConnectorManager {

    /**
     * The tasks set name as specified by the programmer or generated by the system.
     */
    String tasksSetName

    /**
     * The tasks set parent declaring this tasks set or 'null' if this tasks set is the
     * root tasks set of the application.
     */
    GParsRunningTasksSet tasksSetParent

    /**
     * The number of total instances created for this tasks set.
     */
    int numTotalInstances = 1

    /**
     * The set of primitive tasks declared in this tasks set.
     */
    HashMap<String, GParsRunningTask> tasksDeclared = [:]

    /**
     * The set of used connectors.
     */
    HashMap<String, ConnectorInfo> connectors = [:]

    /**
     * The set of used barriers.
     */
    HashMap<String, GParsBarrier> barriers = [:]

    /**
     * The set of virtual connectors declared. Used only with streamable tasks set.
     * Each entry is (virtual_connector_name, real_connector_name).
     */
    HashMap<String, String> virtualConnectors = [:]

    /**
     * The set of virtual barriers declared. Used only with streamable tasks set.
     * Each entry is (virtual_barrier_name, real_barrier_name).
     */
    HashMap<String, String> virtualBarriers = [:]

    /**
     * The initialization code for the tasks set.
     */
    Procedure1<SystemContext> tasksSetInitializationCode = null

    /**
     * The termination code for the tasks set.
     */
    Procedure1<SystemContext> tasksSetTerminationCode = null

    /**
     * The data dictionary used by this tasks set.
     */
    Dictionary dataDictionary = new RamDictionary()

    /**
     * Indicate if the tasks set is streamable or executable.
     */
    boolean streamableTasksSet = true

    /**
     * The map of real barriers declared in the tasks set with all the relative counters.
     */
    Map<String, Integer> barriersCounter = [:]

    @Override
    void attachTaskToConnector(String taskName, String connectorName, ConnectorCapability capability) {
        if (taskName == null || taskName.empty)
            throw new IllegalArgumentException("The task name is 'null' or empty")
        if (connectorName == null || connectorName.empty)
            throw new IllegalArgumentException("The connector name is 'null' or empty")
        if (capability == null)
            throw new NullPointerException("The specified capability is 'null'")


        ConnectorInfo ci = null
        String computedTaskName = taskName

        // Check if this running tasks set is or not streamable.
        if (virtualConnectors.size() != 0 && virtualConnectors.containsKey(connectorName)) {
            String realConnectorName = virtualConnectors.get(connectorName)
            if (!tasksSetParent.connectors.containsKey(realConnectorName))
                throw new IllegalArgumentException("Tasksset ${tasksSetName}: the virtual connector <${connectorName}> " +
                        "can not be bound to unexistant real connector <${realConnectorName}> in parent tasksset ${tasksSetParent.tasksSetName}")
            ci = tasksSetParent.connectors.get(realConnectorName)
            computedTaskName = "${tasksSetName}_${taskName}"

        } else {
            if (!connectors.containsKey(connectorName))
                throw new IllegalArgumentException("The connector name ${connectorName} has not been declared!")
            ci = connectors.get(connectorName)
        }

        if (ci == null)
            throw new RuntimeException("Bug in code!")

        if (capability == ConnectorCapability.READ) {
            // Read access.
            if (!ci.readAccessList.contains(computedTaskName))
                ci.readAccessList.add(computedTaskName)
        } else if (capability == ConnectorCapability.WRITE) {
            // Write access.
            if (!ci.writeAccessList.contains(computedTaskName))
                ci.writeAccessList.add(computedTaskName)
        } else {
            // Read-write access.
            if (!ci.readAccessList.contains(computedTaskName))
                ci.readAccessList.add(computedTaskName)
            if (!ci.writeAccessList.contains(computedTaskName))
                ci.writeAccessList.add(computedTaskName)
        }
    }
}


class ConnectorInfo {
    /**
     * The tasks-shared connector implementation.
     */
    GParsConnector connector

    /**
     * The set of tasks with read capabilities on this connector.
     */
    final HashSet<String> readAccessList = []

    /**
     * The set of tasks with write capabilities on this connector.
     */
    final HashSet<String> writeAccessList = []
}
